"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/students/page",{

/***/ "(app-pages-browser)/./services/index.ts":
/*!***************************!*\
  !*** ./services/index.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_BASE_URL: function() { return /* binding */ API_BASE_URL; },\n/* harmony export */   adminAPI: function() { return /* binding */ adminAPI; },\n/* harmony export */   applicationsAPI: function() { return /* binding */ applicationsAPI; },\n/* harmony export */   contentAPI: function() { return /* binding */ contentAPI; },\n/* harmony export */   getImageUrl: function() { return /* binding */ getImageUrl; },\n/* harmony export */   healthAPI: function() { return /* binding */ healthAPI; },\n/* harmony export */   teachersAPI: function() { return /* binding */ teachersAPI; }\n/* harmony export */ });\n// API Configuration - Direct URL configuration (no env dependency)\n// const API_BASE_URL = 'https://hims-college-backend.vercel.app';\n// const API_BASE_URL = 'https://hims-college-backend.vercel.app'; // Local development URL\n// For production, change this to your production URL:\n// const API_BASE_URL = 'https://your-production-api.com';\nconst API_BASE_URL = \"http://localhost:5000\"; // Local development URL\n// Helper function to get full image URL with cache busting\nconst getImageUrl = function(imagePath) {\n    let forceRefresh = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    if (!imagePath) return \"\";\n    if (imagePath.startsWith(\"http\")) {\n        // Add cache busting parameter for Cloudinary URLs\n        if (imagePath.includes(\"cloudinary.com\")) {\n            const separator = imagePath.includes(\"?\") ? \"&\" : \"?\";\n            const timestamp = forceRefresh ? Date.now() : Math.floor(Date.now() / 60000); // Refresh every minute or force refresh\n            return \"\".concat(imagePath).concat(separator, \"v=\").concat(timestamp);\n        }\n        return imagePath; // External URLs (Unsplash, etc.)\n    }\n    return \"\".concat(API_BASE_URL).concat(imagePath.startsWith(\"/\") ? imagePath : \"/\".concat(imagePath));\n};\n// Helper function to get auth headers\nconst getAuthHeaders = ()=>{\n    const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n    return {\n        \"Content-Type\": \"application/json\",\n        ...token && {\n            \"Authorization\": \"Bearer \".concat(token)\n        }\n    };\n};\n// Helper function to handle API responses\nconst handleResponse = async (response)=>{\n    if (!response.ok) {\n        let errorMessage = \"HTTP \".concat(response.status);\n        try {\n            const errorData = await response.json();\n            errorMessage = errorData.error || errorData.message || errorMessage;\n        } catch (e) {\n            // If JSON parsing fails, use status-based messages\n            switch(response.status){\n                case 400:\n                    errorMessage = \"Invalid request data\";\n                    break;\n                case 401:\n                    errorMessage = \"Authentication required\";\n                    break;\n                case 403:\n                    errorMessage = \"Access forbidden\";\n                    break;\n                case 404:\n                    errorMessage = \"API endpoint not found\";\n                    break;\n                case 500:\n                    errorMessage = \"Server error occurred\";\n                    break;\n                default:\n                    errorMessage = \"Network error occurred\";\n            }\n        }\n        throw new Error(errorMessage);\n    }\n    return response.json();\n};\n// Applications API\nconst applicationsAPI = {\n    // Submit new application\n    submit: async (formData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/applications\"), {\n            method: \"POST\",\n            mode: \"cors\",\n            body: formData // FormData object\n        });\n        return handleResponse(response);\n    },\n    // Get all applications\n    getAll: async function() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const query = new URLSearchParams(params).toString();\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/applications\").concat(query ? \"?\".concat(query) : \"\"), {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return handleResponse(response);\n    },\n    // Get application status by email\n    getStatusByEmail: async (email)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/applications/status/\").concat(encodeURIComponent(email)));\n        return handleResponse(response);\n    },\n    // Get application statistics\n    getStatistics: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/applications/statistics\"), {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return handleResponse(response);\n    },\n    // Update application status\n    updateStatus: async (id, status, notes)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/applications/\").concat(id), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                status,\n                notes\n            })\n        });\n        return handleResponse(response);\n    }\n};\n// Admin API\nconst adminAPI = {\n    // Login\n    login: async (email, password)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/admin/login\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n        return handleResponse(response);\n    },\n    // Get profile\n    getProfile: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/admin/profile\"), {\n            headers: getAuthHeaders()\n        });\n        return handleResponse(response);\n    },\n    // Update profile\n    updateProfile: async (name, email)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/admin/profile\"), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                name,\n                email\n            })\n        });\n        return handleResponse(response);\n    },\n    // Change password\n    changePassword: async (currentPassword, newPassword)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/admin/change-password\"), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                currentPassword,\n                newPassword\n            })\n        });\n        return handleResponse(response);\n    }\n};\n// Content API (Teachers, Students, Hero Slides)\nconst contentAPI = {\n    // Hero Slides\n    heroSlides: {\n        getAll: async ()=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/hero-slides\"));\n            return handleResponse(response);\n        },\n        getAllAdmin: async ()=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/hero-slides\"), {\n                headers: getAuthHeaders()\n            });\n            return handleResponse(response);\n        },\n        // Legacy method - uses FormData (file upload)\n        create: async (formData)=>{\n            const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/hero-slides\"), {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            return handleResponse(response);\n        },\n        // New method - uses Cloudinary URL (no file upload)\n        createWithUrl: async (slideData)=>{\n            const url = \"\".concat(API_BASE_URL, \"/api/content/admin/hero-slides-url\");\n            const headers = getAuthHeaders();\n            console.log(\"\\uD83C\\uDF10 API Call: POST\", url);\n            console.log(\"\\uD83D\\uDCCB Headers:\", headers);\n            console.log(\"\\uD83D\\uDCE4 Data:\", slideData);\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(slideData)\n            });\n            console.log(\"\\uD83D\\uDCE5 Response status:\", response.status);\n            console.log(\"\\uD83D\\uDCE5 Response headers:\", Object.fromEntries(response.headers.entries()));\n            return handleResponse(response);\n        },\n        // Legacy method - uses FormData (file upload)\n        update: async (id, formData)=>{\n            const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/hero-slides/\").concat(id), {\n                method: \"PUT\",\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            return handleResponse(response);\n        },\n        // New method - uses Cloudinary URL (no file upload)\n        updateWithUrl: async (id, slideData)=>{\n            const url = \"\".concat(API_BASE_URL, \"/api/content/admin/hero-slides-url/\").concat(id);\n            const headers = getAuthHeaders();\n            console.log(\"\\uD83C\\uDF10 API Call: PUT\", url);\n            console.log(\"\\uD83D\\uDCCB Headers:\", headers);\n            console.log(\"\\uD83D\\uDCE4 Data:\", slideData);\n            const response = await fetch(url, {\n                method: \"PUT\",\n                headers,\n                body: JSON.stringify(slideData)\n            });\n            console.log(\"\\uD83D\\uDCE5 Response status:\", response.status);\n            console.log(\"\\uD83D\\uDCE5 Response headers:\", Object.fromEntries(response.headers.entries()));\n            return handleResponse(response);\n        },\n        delete: async (id)=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/hero-slides/\").concat(id), {\n                method: \"DELETE\",\n                headers: getAuthHeaders()\n            });\n            return handleResponse(response);\n        }\n    },\n    // Teachers\n    teachers: {\n        getAll: async ()=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/teachers\"));\n            return handleResponse(response);\n        },\n        getAllAdmin: async ()=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/teachers\"), {\n                headers: getAuthHeaders()\n            });\n            return handleResponse(response);\n        },\n        create: async (formData)=>{\n            const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/teachers\"), {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            return handleResponse(response);\n        },\n        // New method - uses JSON data (no file upload)\n        createWithData: async (teacherData)=>{\n            // Convert JSON data to FormData for compatibility with existing endpoint\n            const formData = new FormData();\n            // Add all fields to FormData\n            formData.append(\"name\", teacherData.name);\n            formData.append(\"position\", teacherData.position);\n            formData.append(\"expertise\", teacherData.expertise);\n            formData.append(\"description\", teacherData.description);\n            formData.append(\"rating\", teacherData.rating.toString());\n            formData.append(\"order\", teacherData.order.toString());\n            formData.append(\"isActive\", teacherData.isActive.toString());\n            // Add optional fields if provided\n            if (teacherData.imageUrl) formData.append(\"imageUrl\", teacherData.imageUrl);\n            if (teacherData.email) formData.append(\"email\", teacherData.email);\n            if (teacherData.phone) formData.append(\"phone\", teacherData.phone);\n            if (teacherData.department) formData.append(\"department\", teacherData.department);\n            if (teacherData.qualifications) formData.append(\"qualifications\", teacherData.qualifications);\n            if (teacherData.experience) formData.append(\"experience\", teacherData.experience);\n            const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/teachers\"), {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            return handleResponse(response);\n        },\n        // New method - uses JSON data (no file upload)\n        updateWithData: async (id, teacherData)=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/teachers/\").concat(id), {\n                method: \"PUT\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(teacherData)\n            });\n            return handleResponse(response);\n        },\n        // New method - specifically for updating teachers with image URLs\n        updateWithUrl: async (id, teacherData)=>{\n            const url = \"\".concat(API_BASE_URL, \"/api/content/admin/teachers-url/\").concat(id);\n            const headers = getAuthHeaders();\n            console.log(\"\\uD83C\\uDF10 API Call: PUT\", url);\n            console.log(\"\\uD83D\\uDCCB Headers:\", headers);\n            console.log(\"\\uD83D\\uDCE4 Data:\", teacherData);\n            const response = await fetch(url, {\n                method: \"PUT\",\n                headers,\n                body: JSON.stringify(teacherData)\n            });\n            console.log(\"\\uD83D\\uDCE5 Response status:\", response.status);\n            console.log(\"\\uD83D\\uDCE5 Response headers:\", Object.fromEntries(response.headers.entries()));\n            return handleResponse(response);\n        },\n        delete: async (id)=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/teachers/\").concat(id), {\n                method: \"DELETE\",\n                headers: getAuthHeaders()\n            });\n            return handleResponse(response);\n        }\n    },\n    // Students\n    students: {\n        getAll: async (year)=>{\n            const url = year && year !== \"all\" ? \"\".concat(API_BASE_URL, \"/api/content/students?year=\").concat(year) : \"\".concat(API_BASE_URL, \"/api/content/students\");\n            const response = await fetch(url);\n            return handleResponse(response);\n        },\n        getYears: async ()=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/students/years\"));\n            return handleResponse(response);\n        },\n        getAllAdmin: async ()=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/students\"), {\n                headers: getAuthHeaders()\n            });\n            return handleResponse(response);\n        },\n        create: async (formData)=>{\n            const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/students\"), {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            return handleResponse(response);\n        },\n        update: async (id, formData)=>{\n            const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/students/\").concat(id), {\n                method: \"PUT\",\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            return handleResponse(response);\n        },\n        delete: async (id)=>{\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/admin/students/\").concat(id), {\n                method: \"DELETE\",\n                headers: getAuthHeaders()\n            });\n            return handleResponse(response);\n        }\n    },\n    // Direct image upload - Returns Cloudinary URL\n    uploadImage: async function(file) {\n        let folder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"hims-college/hero-slides\";\n        const formData = new FormData();\n        formData.append(\"image\", file);\n        formData.append(\"folder\", folder);\n        const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n        console.log(\"\\uD83D\\uDCE4 Uploading image to backend...\");\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/upload-image\"), {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: formData\n        });\n        console.log(\"\\uD83D\\uDCE5 Upload response status:\", response.status);\n        return handleResponse(response);\n    },\n    // Direct image upload without Sharp processing (fallback for problematic images)\n    uploadImageDirect: async function(file) {\n        let folder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"hims-college/hero-slides\";\n        const formData = new FormData();\n        formData.append(\"image\", file);\n        formData.append(\"folder\", folder);\n        const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n        console.log(\"\\uD83D\\uDCE4 Uploading image directly (no compression)...\");\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/upload-image-direct\"), {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: formData\n        });\n        console.log(\"\\uD83D\\uDCE5 Direct upload response status:\", response.status);\n        return handleResponse(response);\n    },\n    // Legacy image upload (for compatibility)\n    uploadImageLegacy: async (file)=>{\n        const formData = new FormData();\n        formData.append(\"image\", file);\n        const token =  true ? localStorage.getItem(\"adminToken\") : 0;\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/content/upload\"), {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: formData\n        });\n        return handleResponse(response);\n    }\n};\n// Teachers API (legacy support)\nconst teachersAPI = {\n    getAll: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/teachers\"));\n        return handleResponse(response);\n    },\n    getAllAdmin: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/teachers/admin/all\"), {\n            headers: getAuthHeaders()\n        });\n        return handleResponse(response);\n    },\n    create: async (teacherData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/teachers/admin\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(teacherData)\n        });\n        return handleResponse(response);\n    },\n    update: async (id, teacherData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/teachers/admin/\").concat(id), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(teacherData)\n        });\n        return handleResponse(response);\n    },\n    delete: async (id)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/teachers/admin/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        return handleResponse(response);\n    }\n};\n// Health check\nconst healthAPI = {\n    check: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/health\"));\n        return handleResponse(response);\n    }\n};\n// Export base URL for direct use if needed\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/index.ts\n"));

/***/ })

});