"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/hero-slides/page",{

/***/ "(app-pages-browser)/./services/cloudinary.ts":
/*!********************************!*\
  !*** ./services/cloudinary.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOptimizedImageUrl: function() { return /* binding */ getOptimizedImageUrl; },\n/* harmony export */   uploadImageToCloudinary: function() { return /* binding */ uploadImageToCloudinary; },\n/* harmony export */   uploadMultipleImages: function() { return /* binding */ uploadMultipleImages; }\n/* harmony export */ });\n// Frontend Cloudinary Upload Configuration\n// NOTE: Using unsigned uploads with preset for security\nconst CLOUDINARY_CLOUD_NAME = \"dwtru703l\";\nconst CLOUDINARY_UPLOAD_PRESET = \"hims-college-unsigned\"; // You'll need to create this preset in Cloudinary\n/**\r\n * Upload image directly to Cloudinary from frontend\r\n * @param file - The image file to upload\r\n * @param folder - Optional folder name (will be set in upload preset)\r\n * @returns Promise with Cloudinary upload result\r\n */ const uploadImageToCloudinary = async function(file) {\n    let folder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"hims-college/hero-slides\";\n    try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET);\n        formData.append(\"folder\", folder);\n        // Add transformation parameters for optimization\n        formData.append(\"quality\", \"auto\");\n        formData.append(\"fetch_format\", \"auto\");\n        const response = await fetch(\"https://api.cloudinary.com/v1_1/\".concat(CLOUDINARY_CLOUD_NAME, \"/image/upload\"), {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            var _errorData_error;\n            const errorData = await response.json();\n            throw new Error(((_errorData_error = errorData.error) === null || _errorData_error === void 0 ? void 0 : _errorData_error.message) || \"Failed to upload image to Cloudinary\");\n        }\n        const result = await response.json();\n        return {\n            secure_url: result.secure_url,\n            public_id: result.public_id,\n            width: result.width,\n            height: result.height\n        };\n    } catch (error) {\n        console.error(\"Error uploading to Cloudinary:\", error);\n        throw new Error(error instanceof Error ? error.message : \"Failed to upload image\");\n    }\n};\n/**\r\n * Upload multiple images to Cloudinary\r\n * @param files - Array of files to upload\r\n * @param folder - Optional folder name\r\n * @returns Promise with array of upload results\r\n */ const uploadMultipleImages = async (files, folder)=>{\n    try {\n        const uploadPromises = files.map((file)=>uploadImageToCloudinary(file, folder));\n        return await Promise.all(uploadPromises);\n    } catch (error) {\n        console.error(\"Error uploading multiple images:\", error);\n        throw error;\n    }\n};\n/**\r\n * Get optimized image URL from Cloudinary\r\n * @param publicId - The public ID of the image\r\n * @param transformations - Optional transformation parameters\r\n * @returns Optimized image URL\r\n */ const getOptimizedImageUrl = function(publicId) {\n    let transformations = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"q_auto,f_auto\";\n    return \"https://res.cloudinary.com/\".concat(CLOUDINARY_CLOUD_NAME, \"/image/upload/\").concat(transformations, \"/\").concat(publicId);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL2Nsb3VkaW5hcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDO0FBQzNDLHdEQUF3RDtBQUN4RCxNQUFNQSx3QkFBd0I7QUFDOUIsTUFBTUMsMkJBQTJCLHlCQUF5QixrREFBa0Q7QUFZNUc7Ozs7O0NBS0MsR0FDTSxNQUFNQywwQkFBMEIsZUFDckNDO1FBQ0FDLDBFQUFpQjtJQUVqQixJQUFJO1FBQ0YsTUFBTUMsV0FBVyxJQUFJQztRQUNyQkQsU0FBU0UsTUFBTSxDQUFDLFFBQVFKO1FBQ3hCRSxTQUFTRSxNQUFNLENBQUMsaUJBQWlCTjtRQUNqQ0ksU0FBU0UsTUFBTSxDQUFDLFVBQVVIO1FBRTFCLGlEQUFpRDtRQUNqREMsU0FBU0UsTUFBTSxDQUFDLFdBQVc7UUFDM0JGLFNBQVNFLE1BQU0sQ0FBQyxnQkFBZ0I7UUFFaEMsTUFBTUMsV0FBVyxNQUFNQyxNQUNyQixtQ0FBeUQsT0FBdEJULHVCQUFzQixrQkFDekQ7WUFDRVUsUUFBUTtZQUNSQyxNQUFNTjtRQUNSO1FBR0YsSUFBSSxDQUFDRyxTQUFTSSxFQUFFLEVBQUU7Z0JBRUFDO1lBRGhCLE1BQU1BLFlBQVksTUFBTUwsU0FBU00sSUFBSTtZQUNyQyxNQUFNLElBQUlDLE1BQU1GLEVBQUFBLG1CQUFBQSxVQUFVRyxLQUFLLGNBQWZILHVDQUFBQSxpQkFBaUJJLE9BQU8sS0FBSTtRQUM5QztRQUVBLE1BQU1DLFNBQVMsTUFBTVYsU0FBU00sSUFBSTtRQUVsQyxPQUFPO1lBQ0xLLFlBQVlELE9BQU9DLFVBQVU7WUFDN0JDLFdBQVdGLE9BQU9FLFNBQVM7WUFDM0JDLE9BQU9ILE9BQU9HLEtBQUs7WUFDbkJDLFFBQVFKLE9BQU9JLE1BQU07UUFDdkI7SUFDRixFQUFFLE9BQU9OLE9BQU87UUFDZE8sUUFBUVAsS0FBSyxDQUFDLGtDQUFrQ0E7UUFDaEQsTUFBTSxJQUFJRCxNQUFNQyxpQkFBaUJELFFBQVFDLE1BQU1DLE9BQU8sR0FBRztJQUMzRDtBQUNGLEVBQUU7QUFFRjs7Ozs7Q0FLQyxHQUNNLE1BQU1PLHVCQUF1QixPQUNsQ0MsT0FDQXJCO0lBRUEsSUFBSTtRQUNGLE1BQU1zQixpQkFBaUJELE1BQU1FLEdBQUcsQ0FBQ3hCLENBQUFBLE9BQVFELHdCQUF3QkMsTUFBTUM7UUFDdkUsT0FBTyxNQUFNd0IsUUFBUUMsR0FBRyxDQUFDSDtJQUMzQixFQUFFLE9BQU9WLE9BQU87UUFDZE8sUUFBUVAsS0FBSyxDQUFDLG9DQUFvQ0E7UUFDbEQsTUFBTUE7SUFDUjtBQUNGLEVBQUU7QUFFRjs7Ozs7Q0FLQyxHQUNNLE1BQU1jLHVCQUF1QixTQUNsQ0M7UUFDQUMsbUZBQTBCO0lBRTFCLE9BQU8sOEJBQW9FQSxPQUF0Q2hDLHVCQUFzQixrQkFBbUMrQixPQUFuQkMsaUJBQWdCLEtBQVksT0FBVEQ7QUFDaEcsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zZXJ2aWNlcy9jbG91ZGluYXJ5LnRzP2VjZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRnJvbnRlbmQgQ2xvdWRpbmFyeSBVcGxvYWQgQ29uZmlndXJhdGlvblxyXG4vLyBOT1RFOiBVc2luZyB1bnNpZ25lZCB1cGxvYWRzIHdpdGggcHJlc2V0IGZvciBzZWN1cml0eVxyXG5jb25zdCBDTE9VRElOQVJZX0NMT1VEX05BTUUgPSAnZHd0cnU3MDNsJztcclxuY29uc3QgQ0xPVURJTkFSWV9VUExPQURfUFJFU0VUID0gJ2hpbXMtY29sbGVnZS11bnNpZ25lZCc7IC8vIFlvdSdsbCBuZWVkIHRvIGNyZWF0ZSB0aGlzIHByZXNldCBpbiBDbG91ZGluYXJ5XHJcblxyXG4vLyBVcGxvYWQgcHJvZ3Jlc3MgY2FsbGJhY2sgdHlwZVxyXG5leHBvcnQgdHlwZSBVcGxvYWRQcm9ncmVzc0NhbGxiYWNrID0gKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENsb3VkaW5hcnlVcGxvYWRSZXN1bHQge1xyXG4gIHNlY3VyZV91cmw6IHN0cmluZztcclxuICBwdWJsaWNfaWQ6IHN0cmluZztcclxuICB3aWR0aDogbnVtYmVyO1xyXG4gIGhlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogVXBsb2FkIGltYWdlIGRpcmVjdGx5IHRvIENsb3VkaW5hcnkgZnJvbSBmcm9udGVuZFxyXG4gKiBAcGFyYW0gZmlsZSAtIFRoZSBpbWFnZSBmaWxlIHRvIHVwbG9hZFxyXG4gKiBAcGFyYW0gZm9sZGVyIC0gT3B0aW9uYWwgZm9sZGVyIG5hbWUgKHdpbGwgYmUgc2V0IGluIHVwbG9hZCBwcmVzZXQpXHJcbiAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCBDbG91ZGluYXJ5IHVwbG9hZCByZXN1bHRcclxuICovXHJcbmV4cG9ydCBjb25zdCB1cGxvYWRJbWFnZVRvQ2xvdWRpbmFyeSA9IGFzeW5jIChcclxuICBmaWxlOiBGaWxlLCBcclxuICBmb2xkZXI6IHN0cmluZyA9ICdoaW1zLWNvbGxlZ2UvaGVyby1zbGlkZXMnXHJcbik6IFByb21pc2U8Q2xvdWRpbmFyeVVwbG9hZFJlc3VsdD4gPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3VwbG9hZF9wcmVzZXQnLCBDTE9VRElOQVJZX1VQTE9BRF9QUkVTRVQpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdmb2xkZXInLCBmb2xkZXIpO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgdHJhbnNmb3JtYXRpb24gcGFyYW1ldGVycyBmb3Igb3B0aW1pemF0aW9uXHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3F1YWxpdHknLCAnYXV0bycpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdmZXRjaF9mb3JtYXQnLCAnYXV0bycpO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgIGBodHRwczovL2FwaS5jbG91ZGluYXJ5LmNvbS92MV8xLyR7Q0xPVURJTkFSWV9DTE9VRF9OQU1FfS9pbWFnZS91cGxvYWRgLFxyXG4gICAgICB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgYm9keTogZm9ybURhdGEsXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvckRhdGEuZXJyb3I/Lm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGxvYWQgaW1hZ2UgdG8gQ2xvdWRpbmFyeScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2VjdXJlX3VybDogcmVzdWx0LnNlY3VyZV91cmwsXHJcbiAgICAgIHB1YmxpY19pZDogcmVzdWx0LnB1YmxpY19pZCxcclxuICAgICAgd2lkdGg6IHJlc3VsdC53aWR0aCxcclxuICAgICAgaGVpZ2h0OiByZXN1bHQuaGVpZ2h0LFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBsb2FkaW5nIHRvIENsb3VkaW5hcnk6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byB1cGxvYWQgaW1hZ2UnKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogVXBsb2FkIG11bHRpcGxlIGltYWdlcyB0byBDbG91ZGluYXJ5XHJcbiAqIEBwYXJhbSBmaWxlcyAtIEFycmF5IG9mIGZpbGVzIHRvIHVwbG9hZFxyXG4gKiBAcGFyYW0gZm9sZGVyIC0gT3B0aW9uYWwgZm9sZGVyIG5hbWVcclxuICogQHJldHVybnMgUHJvbWlzZSB3aXRoIGFycmF5IG9mIHVwbG9hZCByZXN1bHRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXBsb2FkTXVsdGlwbGVJbWFnZXMgPSBhc3luYyAoXHJcbiAgZmlsZXM6IEZpbGVbXSwgXHJcbiAgZm9sZGVyPzogc3RyaW5nXHJcbik6IFByb21pc2U8Q2xvdWRpbmFyeVVwbG9hZFJlc3VsdFtdPiA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHVwbG9hZFByb21pc2VzID0gZmlsZXMubWFwKGZpbGUgPT4gdXBsb2FkSW1hZ2VUb0Nsb3VkaW5hcnkoZmlsZSwgZm9sZGVyKSk7XHJcbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwodXBsb2FkUHJvbWlzZXMpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGxvYWRpbmcgbXVsdGlwbGUgaW1hZ2VzOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgb3B0aW1pemVkIGltYWdlIFVSTCBmcm9tIENsb3VkaW5hcnlcclxuICogQHBhcmFtIHB1YmxpY0lkIC0gVGhlIHB1YmxpYyBJRCBvZiB0aGUgaW1hZ2VcclxuICogQHBhcmFtIHRyYW5zZm9ybWF0aW9ucyAtIE9wdGlvbmFsIHRyYW5zZm9ybWF0aW9uIHBhcmFtZXRlcnNcclxuICogQHJldHVybnMgT3B0aW1pemVkIGltYWdlIFVSTFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldE9wdGltaXplZEltYWdlVXJsID0gKFxyXG4gIHB1YmxpY0lkOiBzdHJpbmcsXHJcbiAgdHJhbnNmb3JtYXRpb25zOiBzdHJpbmcgPSAncV9hdXRvLGZfYXV0bydcclxuKTogc3RyaW5nID0+IHtcclxuICByZXR1cm4gYGh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tLyR7Q0xPVURJTkFSWV9DTE9VRF9OQU1FfS9pbWFnZS91cGxvYWQvJHt0cmFuc2Zvcm1hdGlvbnN9LyR7cHVibGljSWR9YDtcclxufTsgIl0sIm5hbWVzIjpbIkNMT1VESU5BUllfQ0xPVURfTkFNRSIsIkNMT1VESU5BUllfVVBMT0FEX1BSRVNFVCIsInVwbG9hZEltYWdlVG9DbG91ZGluYXJ5IiwiZmlsZSIsImZvbGRlciIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsIm9rIiwiZXJyb3JEYXRhIiwianNvbiIsIkVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwicmVzdWx0Iiwic2VjdXJlX3VybCIsInB1YmxpY19pZCIsIndpZHRoIiwiaGVpZ2h0IiwiY29uc29sZSIsInVwbG9hZE11bHRpcGxlSW1hZ2VzIiwiZmlsZXMiLCJ1cGxvYWRQcm9taXNlcyIsIm1hcCIsIlByb21pc2UiLCJhbGwiLCJnZXRPcHRpbWl6ZWRJbWFnZVVybCIsInB1YmxpY0lkIiwidHJhbnNmb3JtYXRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/cloudinary.ts\n"));

/***/ })

});