"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/hero-slides/page",{

/***/ "(app-pages-browser)/./services/cloudinary.ts":
/*!********************************!*\
  !*** ./services/cloudinary.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOptimizedImageUrl: function() { return /* binding */ getOptimizedImageUrl; },\n/* harmony export */   uploadImageToCloudinary: function() { return /* binding */ uploadImageToCloudinary; },\n/* harmony export */   uploadMultipleImages: function() { return /* binding */ uploadMultipleImages; }\n/* harmony export */ });\n// Frontend Cloudinary Upload Configuration\n// NOTE: Using unsigned uploads with preset for security\nconst CLOUDINARY_CLOUD_NAME = \"dwtru703l\";\nconst CLOUDINARY_UPLOAD_PRESET = \"hims-college-unsigned\"; // You'll need to create this preset in Cloudinary\n/**\r\n * Upload image directly to Cloudinary from frontend\r\n * @param file - The image file to upload\r\n * @param folder - Optional folder name (will be set in upload preset)\r\n * @param onProgress - Optional progress callback\r\n * @returns Promise with Cloudinary upload result\r\n */ const uploadImageToCloudinary = async function(file) {\n    let folder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"hims-college/hero-slides\", onProgress = arguments.length > 2 ? arguments[2] : void 0;\n    try {\n        // Validate file size (5MB limit)\n        const maxSize = 5 * 1024 * 1024;\n        if (file.size > maxSize) {\n            throw new Error(\"File size must be less than 5MB\");\n        }\n        // Validate file type\n        const allowedTypes = [\n            \"image/jpeg\",\n            \"image/jpg\",\n            \"image/png\",\n            \"image/gif\",\n            \"image/webp\"\n        ];\n        if (!allowedTypes.includes(file.type)) {\n            throw new Error(\"Only JPEG, PNG, GIF, and WebP images are allowed\");\n        }\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET);\n        formData.append(\"folder\", folder);\n        // Add transformation parameters for optimization\n        formData.append(\"quality\", \"auto\");\n        formData.append(\"fetch_format\", \"auto\");\n        const response = await fetch(\"https://api.cloudinary.com/v1_1/\".concat(CLOUDINARY_CLOUD_NAME, \"/image/upload\"), {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            var _errorData_error_message, _errorData_error, _errorData_error_message1, _errorData_error1, _errorData_error2;\n            const errorData = await response.json();\n            // Provide specific error messages for common issues\n            if ((_errorData_error = errorData.error) === null || _errorData_error === void 0 ? void 0 : (_errorData_error_message = _errorData_error.message) === null || _errorData_error_message === void 0 ? void 0 : _errorData_error_message.includes(\"Upload preset\")) {\n                throw new Error(\"Upload preset '\".concat(CLOUDINARY_UPLOAD_PRESET, \"' not found. Please create it in your Cloudinary dashboard. See CLOUDINARY_SETUP.md for instructions.\"));\n            }\n            if ((_errorData_error1 = errorData.error) === null || _errorData_error1 === void 0 ? void 0 : (_errorData_error_message1 = _errorData_error1.message) === null || _errorData_error_message1 === void 0 ? void 0 : _errorData_error_message1.includes(\"Invalid\")) {\n                throw new Error(\"Invalid upload configuration. Please check your Cloudinary settings.\");\n            }\n            throw new Error(((_errorData_error2 = errorData.error) === null || _errorData_error2 === void 0 ? void 0 : _errorData_error2.message) || \"Upload failed with status \".concat(response.status));\n        }\n        const result = await response.json();\n        // Call progress callback with 100%\n        if (onProgress) onProgress(100);\n        return {\n            secure_url: result.secure_url,\n            public_id: result.public_id,\n            width: result.width,\n            height: result.height\n        };\n    } catch (error) {\n        console.error(\"Error uploading to Cloudinary:\", error);\n        if (error instanceof Error) {\n            throw error; // Re-throw with original message\n        }\n        throw new Error(\"Failed to upload image to Cloudinary\");\n    }\n};\n/**\r\n * Upload multiple images to Cloudinary\r\n * @param files - Array of files to upload\r\n * @param folder - Optional folder name\r\n * @returns Promise with array of upload results\r\n */ const uploadMultipleImages = async (files, folder)=>{\n    try {\n        const uploadPromises = files.map((file)=>uploadImageToCloudinary(file, folder));\n        return await Promise.all(uploadPromises);\n    } catch (error) {\n        console.error(\"Error uploading multiple images:\", error);\n        throw error;\n    }\n};\n/**\r\n * Get optimized image URL from Cloudinary\r\n * @param publicId - The public ID of the image\r\n * @param transformations - Optional transformation parameters\r\n * @returns Optimized image URL\r\n */ const getOptimizedImageUrl = function(publicId) {\n    let transformations = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"q_auto,f_auto\";\n    return \"https://res.cloudinary.com/\".concat(CLOUDINARY_CLOUD_NAME, \"/image/upload/\").concat(transformations, \"/\").concat(publicId);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/cloudinary.ts\n"));

/***/ })

});